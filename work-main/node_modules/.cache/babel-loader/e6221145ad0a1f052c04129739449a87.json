{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aaalh\\\\OneDrive\\\\Desktop\\\\work-main\\\\work-main\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Navigation } from './components/navigation';\nimport { Header } from './components/header';\nimport { About } from './components/about';\nimport { Partners } from './components/partners';\nimport { Services } from './components/services'; // import { Serv } from './components/serv'\n\nimport { Contact } from './components/contact'; // import  i18n  from './i18n'  ///\n// import i18next from 'i18next'\n\nimport translationEN from \"./locale/en.json\"; ///\n\nimport translationAR from \"./locale/ar.json\"; ///\n\nimport { useTranslation } from 'react-i18next'; //for lan added\n\nimport SmoothScroll from 'smooth-scroll';\nimport { Industries } from './components/industries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const scroll = new SmoothScroll('a[href*=\"#\"]', {\n  speed: 1000,\n  speedAsDuration: true\n});\n\nconst App = () => {\n  _s();\n\n  const {\n    i18n\n  } = useTranslation(); //for lan added\n\n  const [landingPageData, setLandingPageData] = useState({}); ///\n\n  useEffect(() => {\n    if (i18n.language === 'en') return;\n    setLandingPageData(translationAR);\n  }, [i18n.language]);\n  useEffect(() => {\n    if (i18n.language === 'ar') return;\n    setLandingPageData(translationEN);\n  }, [i18n.language]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      data: landingPageData.Header\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Services, {\n      data: landingPageData.Services\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), \"  \", /*#__PURE__*/_jsxDEV(Industries, {\n      data: landingPageData.Industries\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Partners, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(About, {\n      data: landingPageData.About\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Contact, {\n      data: landingPageData.Contact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"vUBDuO87T8Wmsj8BIHztO3AEDc8=\", false, function () {\n  return [useTranslation];\n});\n\n_c = App;\nexport default App; // const { t, i18n } = useTranslation(); //for lan added\n// hook can't be used nested, like inside a if statement\n// setLandingPageData(translationEN => translationAR) ///\n// export bottom, import botton here, make a const = botton, i18n.changeLanguage == ár\" etc...\n// hooks | react\n//   setLandingPageData(i18n.language == 'en-ar') ///\n// }, [translationEN, translationAR])\n// }, [i18n.language == 'en' ? setLandingPageData(translationEN) : setLandingPageData(translationAR)])\n// fetch(i18n.language)\n// .then(Response => Response.json())\n// .then(json => setLandingPageData(i18n.language))\n// }, [landingPageData])  \n// i18n.getDataByLanguage()\n// { i18n.language == 'en' && }\n// data={landingPageData.Services2}\n// useEffect(() => {\n//   if(i18n.language === 'en')\n//   return;\n//   setLandingPageData(translationAR) \n// })\n// useEffect(() => {\n//   if(i18n.language === 'ar') \n//   return;\n//   setLandingPageData(translationEN) \n// })\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/aaalh/OneDrive/Desktop/work-main/work-main/src/App.jsx"],"names":["useState","useEffect","Navigation","Header","About","Partners","Services","Contact","translationEN","translationAR","useTranslation","SmoothScroll","Industries","scroll","speed","speedAsDuration","App","i18n","landingPageData","setLandingPageData","language"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAAUC,QAAV,QAA0B,uBAA1B,C,CACA;;AACA,SAASC,OAAT,QAAwB,sBAAxB,C,CACA;AACA;;AACA,OAAOC,aAAP,MAA0B,kBAA1B,C,CAA8C;;AAC9C,OAAOC,aAAP,MAA0B,kBAA1B,C,CAA6C;;AAC7C,SAASC,cAAT,QAA+B,eAA/B,C,CAAgD;;AAChD,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,UAAT,QAA2B,yBAA3B;;AAGA,OAAO,MAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB,cAAjB,EAAiC;AACrDG,EAAAA,KAAK,EAAE,IAD8C;AAErDC,EAAAA,eAAe,EAAE;AAFoC,CAAjC,CAAf;;AAQP,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEhB,QAAM;AAAEC,IAAAA;AAAF,MAAWP,cAAc,EAA/B,CAFgB,CAEmB;;AAGnC,QAAM,CAACQ,eAAD,EAAkBC,kBAAlB,IAAwCnB,QAAQ,CAAC,EAAD,CAAtD,CALgB,CAK2C;;AAG3DC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGgB,IAAI,CAACG,QAAL,KAAkB,IAArB,EACE;AACAD,IAAAA,kBAAkB,CAACV,aAAD,CAAlB;AACH,GAJQ,EAIN,CAACQ,IAAI,CAACG,QAAN,CAJM,CAAT;AAKAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGgB,IAAI,CAACG,QAAL,KAAkB,IAArB,EACE;AACAD,IAAAA,kBAAkB,CAACX,aAAD,CAAlB;AACH,GAJQ,EAIN,CAACS,IAAI,CAACG,QAAN,CAJM,CAAT;AASA,sBACE;AAAA,4BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAEF,eAAe,CAACf;AAA9B;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEe,eAAe,CAACZ;AAAhC;AAAA;AAAA;AAAA;AAAA,YAHF,qBAKE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEY,eAAe,CAACN;AAAlC;AAAA;AAAA;AAAA;AAAA,YALF,eAOG,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAPH,eASE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEM,eAAe,CAACd;AAA7B;AAAA;AAAA;AAAA;AAAA,YATF,eAUE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEc,eAAe,CAACX;AAA/B;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAxCD;;GAAMS,G;UAEaN,c;;;KAFbM,G;AA0CN,eAAeA,GAAf,C,CAGE;AAEA;AACA;AACA;AAEF;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useState, useEffect } from 'react'\nimport { Navigation } from './components/navigation'\nimport { Header } from './components/header'\nimport { About } from './components/about'\nimport { Partners } from './components/partners'\nimport {  Services } from './components/services'\n// import { Serv } from './components/serv'\nimport { Contact } from './components/contact'\n// import  i18n  from './i18n'  ///\n// import i18next from 'i18next'\nimport translationEN from \"./locale/en.json\"  ///\nimport translationAR from \"./locale/ar.json\" ///\nimport { useTranslation } from 'react-i18next'; //for lan added\nimport SmoothScroll from 'smooth-scroll'\nimport { Industries } from './components/industries'\n\n\nexport const scroll = new SmoothScroll('a[href*=\"#\"]', {\n  speed: 1000,\n  speedAsDuration: true,\n})\n\n\n\n\nconst App = () => {\n\n  const { i18n } = useTranslation(); //for lan added\n\n\n  const [landingPageData, setLandingPageData] = useState({}) ///\n\n\n  useEffect(() => {\n    if(i18n.language === 'en')\n      return;\n      setLandingPageData(translationAR) \n  }, [i18n.language])\n  useEffect(() => {\n    if(i18n.language === 'ar') \n      return;\n      setLandingPageData(translationEN) \n  }, [i18n.language])\n\n\n\n\n  return (\n    <div>\n      <Navigation />\n      <Header data={landingPageData.Header} />\n      <Services data={landingPageData.Services} />  {/* /// */}\n      {/* <Serv data={landingPageData.Serv}/> */}\n      <Industries data={landingPageData.Industries}/>\n     \n       <Partners /> \n\n      <About data={landingPageData.About} />\n      <Contact data={landingPageData.Contact} />   \n      </div>\n    )\n\n\n\n\n}\n\nexport default App\n\n\n  // const { t, i18n } = useTranslation(); //for lan added\n\n  // hook can't be used nested, like inside a if statement\n  // setLandingPageData(translationEN => translationAR) ///\n  // export bottom, import botton here, make a const = botton, i18n.changeLanguage == ár\" etc...\n\n// hooks | react\n\n//   setLandingPageData(i18n.language == 'en-ar') ///\n// }, [translationEN, translationAR])\n// }, [i18n.language == 'en' ? setLandingPageData(translationEN) : setLandingPageData(translationAR)])\n\n// fetch(i18n.language)\n// .then(Response => Response.json())\n// .then(json => setLandingPageData(i18n.language))\n// }, [landingPageData])  \n\n// i18n.getDataByLanguage()\n\n// { i18n.language == 'en' && }\n\n// data={landingPageData.Services2}\n\n// useEffect(() => {\n//   if(i18n.language === 'en')\n//   return;\n//   setLandingPageData(translationAR) \n// })\n// useEffect(() => {\n//   if(i18n.language === 'ar') \n//   return;\n//   setLandingPageData(translationEN) \n// })"]},"metadata":{},"sourceType":"module"}